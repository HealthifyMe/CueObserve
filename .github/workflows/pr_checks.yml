name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Pylint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Check if code is in sync with main branch
      run: |
        echo ${{ github.base_ref }}
        if [ -n ${{github.event.pull_request}} ]; then
          echo "Skipping check if code is in sync with main branch"
        else
          echo ${{github.event.pull_request.head.ref}}
          git fetch
          git rev-list --left-right --count origin/main...origin/${{github.event.pull_request.head.ref}}
          if [[ "$(git rev-list --left-right --count origin/main...origin/${{github.event.pull_request.head.ref}} | cut -f1)" > 0 ]]; then exit 1; fi
        fi
        
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Pylint
      run: |
        python -m pip install --upgrade pip
        pip install pylint==2.11.1
        pip install pylint-django==2.4.4
        cat api/requirements.txt | xargs -n 1 pip install || true
        
    - name: Run Pylint
      run: |
        cd api
        export DJANGO_SETTINGS_MODULE=app.settings
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
        echo "************ Getting files for this PR **********"
        git fetch 
        x=$(git diff --name-only origin/main origin/${GITHUB_HEAD_REF} | grep .py | grep -v test | grep -v serializer | grep -v __init__.py | grep -v migrations | grep -v removed || echo 0)
        
        echo "************ Files Fetched **********"
        [[ -z $x ]] && return 0;
        
        pylint ../search-api --rcfile ../search-api/pylintrc --fail-under=8

        echo "************ Files in API folder in this PR **********"
        echo "removing non main api folder files"
        x=$(echo "$x" | grep "^api/")
        PYLINT_STATUS="SUCCESS";
        SUCCESS="SUCCESS";
        FAILED="FAILED";
        if [ ! "$x" = "0" ]; then
          for file in $x; do
            file=$(echo $file | cut -d ':' -f 1)
            echo "Running Pylint on: "$file;
            python ./lint.py --path ../$file --threshold 8
            ret=$?
            if [ $ret -ne 0 ]; then
                echo " ----------------------------- Pylint failed for file: "$file
                PYLINT_STATUS="FAILED"
            fi
          done
        fi
        if [ "$PYLINT_STATUS" = "$FAILED" ]; then
             echo " ----------------------------- Pylint Process Failed";
             return 1;
        fi

  Pytest:
    runs-on: ubuntu-latest

#     services:
#       postgres:
#         image: postgres:latest
#         env:
#           POSTGRES_DB: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_USER: postgres
#         ports:
#           - 5432:5432
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Requirements
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt


    - name: Run Test Cases
      run: |
        export GIT_COMMIT_SHA=${{ github.event.pull_request.head.sha }}
        export GIT_BRANCH=$GITHUB_HEAD_REF

        cd api
        # source .env.dev

        export CC_TEST_REPORTER_ID=${{ secrets.CODE_CLIMATE_TEST_REPORTER_ID }}

        echo "Downloading test_reporter"
        curl https://s3.amazonaws.com/codeclimate/test-reporter/test-reporter-latest-linux-amd64 > test_reporter
        chmod +x test_reporter
        ./test_reporter before-build

        echo "Running pytest"
        if coverage run -m pytest -q -x --tb=auto --cov=./ --cov-report=xml; then
            if [ -e coverage.xml ]
            then
                echo " ---------------- Coverage.xml file found --------------------- "
            else
                echo " ---------------- Coverage.xml file not found --------------------"
            fi

            cd ../
            cp api/coverage.xml coverage.xml

            echo "Uploading report"
            ./api/test_reporter after-build --debug -r $CC_TEST_REPORTER_ID
        
            
            echo "checking if github repo"
            git status

            echo "printing branch"
            git rev-parse --abbrev-ref HEAD
        else
            echo "Test cases failed"
            exit 1
        fi
